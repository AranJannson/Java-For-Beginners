package task6;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class task6_example {

  /**
   * An example for task6
   *
   * <p>ArrayLists and HashMaps
   *
   * <p>Note: Both ArrayLists and HashMaps must have there respective data types imported
   *
   * @author Aran Jannson
   */

  /** Default Constructor */
  public task6_example() {
    super();
  }

  /**
   * An example of how ArrayList's Work in Java
   *
   * <p>Unlike regular Arrays, ArrayLists do not have a fixed size Meaning you can add and remove as
   * many elements as you want and the ArrayList will have a max size accordingly
   */
  public void arrayListExample() {

    // Create ArrayList Object in this case named list
    ArrayList<Integer> list = new ArrayList<Integer>();

    /** Using .add we can add a new element into an ArrayList */

    // Add 2, 3 and 5 into the ArrayList
    list.add(2);
    list.add(3);
    list.add(5);

    /**
     * Using .size you can get an integer value of how many element Are currently in the ArrayList
     */

    // Show the current size of the ArrayList
    System.out.println("Size of the array is: " + list.size() + '\n');

    // Show the current state of the ArrayList
    System.out.println(
        "List after all values added: " + '\n' + Arrays.toString(list.toArray()) + '\n');

    /**
     * Using .remove you can remove a value at a specified location within the ArrayList In this
     * case we removed value in position '2'
     */
    // Remove value at index '2'
    list.remove(2);

    // Show the current state of the ArrayList
    System.out.println(
        "List after removing value in slot '2' " + '\n' + Arrays.toString(list.toArray()) + '\n');

    // Show the current size of the ArrayList
    System.out.println("Size of the array is: " + list.size() + '\n');

    /**
     * Using .get we can get a value at a specified index within the ArrayList Index values start
     * from 0 and go up to the current size of the ArrayList
     */

    // Show the value at index '1' of the ArrayList
    System.out.println("Value at ArrayList Index 1 is: " + list.get(1) + '\n');
  }

  /**
   * An example of how HashMaps work in java
   *
   * <p>A HashMap works by having a key (ID) and a value associated with that key (ID) So basically
   * by calling key (ID) '1' you will get what ever value is linked to the '1'
   *
   * <p>A key (ID) can be any Data Type not just an Integer A key (ID) must be unique for each item
   * A key (ID) can also be an Object
   */
  public void hashMapExample() {

    // Data set example to be added to the HashMap
    String[] stringArray = {"Bob", "Jack", "Ben", "John"};

    // HashMap Object
    Map<Integer, String> map = new HashMap<Integer, String>();

    // Loop to go through the regular Array and add the values into the HashMap
    for (int i = 0; i < stringArray.length; i++) {
      /**
       * Using .put we add values into a HashMap
       *
       * <p>In this case we have an Integer key (ID) which is generated by getting the current value
       * of 'i' Incremented by '1' in order to not have an key (ID) of '0'
       *
       * <p>We then link the current key (ID) to the value at index position 'i' Within the regular
       * Array
       */

      // Add the current item with key (ID) 'i+1' with data from stringArray[i] into the HashMap
      map.put((i + 1), stringArray[i]);
    }

    // Show the current state of the HashMap
    System.out.println("Map after adding all values in: " + '\n' + Arrays.asList(map) + '\n');

    /**
     * Using .remove you remove an item out of the HashMap
     *
     * <p>It works by removing the key (ID) of an element in the HashMap Along with the value
     * associated with the key (ID)
     */

    // Remove value with key (ID) '2'
    map.remove(2);

    // Show the current state of the HashMap
    System.out.println("Map after removing item with id '2': " + '\n' + Arrays.asList(map) + '\n');

    // Show the data associated with the item key (ID) '1'
    System.out.println("Value associated to key '1': " + map.get(1));
  }
}
